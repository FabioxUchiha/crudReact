[{"C:\\Users\\Fabio\\Documents\\crudreact\\basuras\\src\\index.js":"1","C:\\Users\\Fabio\\Documents\\crudreact\\basuras\\src\\App.js":"2","C:\\Users\\Fabio\\Documents\\crudreact\\basuras\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":6250,"mtime":1611519646329,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"nss64w",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Fabio\\Documents\\crudreact\\basuras\\src\\index.js",[],["16","17"],"C:\\Users\\Fabio\\Documents\\crudreact\\basuras\\src\\App.js",["18","19","20"],"import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Table,\n  Button,\n  Container,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  FormGroup,\n  ModalFooter,\n} from \"reactstrap\";\n\nconst data = [\n  // { id: 1, personaje: \"naruto\", anime: \"Naruto\" },\n  // { id: 2, personaje: \"Goku\", anime: \"DBZ\" },\n];\n\nclass App extends React.Component {\n  state = {\n    data: data,\n    form: {\n      id: \"\",\n      personaje: \"\",\n      anime: \"\",\n    },\n    modalInsertar: false,\n    modalEditar: false,\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n\n  mostrarModalInsertar = () => {\n    this.setState({ modalInsertar: true });\n  };\n\n  ocultarModalInsertar = () => {\n    this.setState({ modalInsertar: false });\n  };\n\n  mostrarModalEditar = (registro) => {\n    this.setState({ modalEditar: true, form: registro });\n  };\n\n  ocultarModalEditar = () => {\n    this.setState({ modalEditar: false });\n  };\n\n  insertar = () => {\n    var valorNuevo = { ...this.state.form };\n    valorNuevo.id = this.state.data.length + 1;\n    var lista = this.state.data;\n    lista.push(valorNuevo);\n    this.setState({\n      data: lista,\n      modalInsertar: false,\n    });\n  };\n\n  editar = (dato) => {\n    var contador = 0;\n    var lista = this.state.data;\n    lista.map((registro) => {\n      if (dato.id == registro.id) {\n        lista[contador].personaje = dato.personaje;\n        lista[contador].anime = dato.anime;\n      }\n      contador++;\n    });\n    this.setState({ data: lista, modalEditar: false });\n  };\n\n  eliminar = (dato) => {\n    var opcion = window.confirm(\n      \"Realmente desea eliminar el registro con el persosaje: \" +\n        dato.personaje +\n        \"?\"\n    );\n    if (opcion) {\n      var contador = 0;\n      var lista = this.state.data;\n      lista.map((registro) => {\n        if ((registro.id = dato.id)) {\n          lista.splice(contador, 1);\n        }\n        contador++;\n      });\n      this.setState({ data: lista });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Container>\n          <br />\n          <Button color=\"success\" onClick={() => this.mostrarModalInsertar()}>\n            Insertar Contenido\n          </Button>\n          <br />\n          <br />\n\n          <Table>\n            <thead>\n              <tr>\n                <th>Id</th>\n                <th>personaje</th>\n                <th>anime</th>\n                <th>acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.data.map((elemento) => (\n                <tr>\n                  <th>{elemento.id}</th>\n                  <th>{elemento.personaje}</th>\n                  <th>{elemento.anime}</th>\n                  <th>\n                    <Button\n                      color=\"primary\"\n                      onClick={() => this.mostrarModalEditar(elemento)}\n                    >\n                      Editar\n                    </Button>\n                    {\"  \"}\n                    <Button\n                      color=\"danger\"\n                      onClick={() => this.eliminar(elemento)}\n                    >\n                      Eliminar\n                    </Button>\n                  </th>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Container>\n\n        <Modal isOpen={this.state.modalInsertar}>\n          <ModalHeader>\n            <div>\n              <h3>Insertar registro</h3>\n            </div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>id:</label>\n              <input\n                className=\"form-control\"\n                readOnly\n                type=\"text\"\n                value={this.state.data.length + 1}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>personaje:</label>\n              <input\n                className=\"form-control\"\n                name=\"personaje\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>anime:</label>\n              <input\n                className=\"form-control\"\n                name=\"anime\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button color=\"primary\" onClick={() => this.insertar()}>\n              Insertar\n            </Button>\n            <Button color=\"danger\" onClick={() => this.ocultarModalInsertar()}>\n              Cancelar\n            </Button>\n          </ModalFooter>\n        </Modal>\n\n        <Modal isOpen={this.state.modalEditar}>\n          <ModalHeader>\n            <div>\n              <h3>Editar registro</h3>\n            </div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>id:</label>\n              <input\n                className=\"form-control\"\n                readOnly\n                type=\"text\"\n                value={this.state.form.id}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>personaje:</label>\n              <input\n                className=\"form-control\"\n                name=\"personaje\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.personaje}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>anime:</label>\n              <input\n                className=\"form-control\"\n                name=\"anime\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.anime}\n              />\n            </FormGroup>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              color=\"primary\"\n              onClick={() => this.editar(this.state.form)}\n            >\n              Editar\n            </Button>\n            <Button color=\"danger\" onClick={() => this.ocultarModalEditar()}>\n              Cancelar\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\Fabio\\Documents\\crudreact\\basuras\\src\\reportWebVitals.js",[],{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":72,"column":26,"nodeType":"27","messageId":"28","endLine":72,"endColumn":28},{"ruleId":"29","severity":1,"message":"30","line":73,"column":19,"nodeType":"31","messageId":"32","endLine":73,"endColumn":21},{"ruleId":"25","severity":1,"message":"26","line":91,"column":28,"nodeType":"27","messageId":"28","endLine":91,"endColumn":30},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]